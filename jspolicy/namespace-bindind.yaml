apiVersion: policy.jspolicy.com/v1beta1
kind: JsPolicy
metadata:
  name: "namespace-to-project.binding.policy"
spec:
  operations: ["CREATE"]
  resources: ["namespaces"]
  type: Mutating
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - jspolicy
  javascript: |
    const GITLAB_HOOK_TOKEN = env("GITLAB_HOOK_TOKEN");
    const GITLAB_RANCHER_INTEGRATION = env("GITLAB_RANCHER_INTEGRATION");
    const GITLAB_HOST = env("GITLAB_HOST");
    const GITLAB_TOKEN = env("GITLAB_TOKEN");

    const regex = /[a-zA-Z0-9-]+-([0-9]{1,})-[a-zA-Z0-9-]+$/g;
    matches = request.namespace.matchAll(regex);
    matches2 = null;
    useNextRegexp = false;
    // check project id for review like app-194-review-abc-19247-xxxxx    
    const regex2 = /[a-zA-Z0-9-]+-([0-9]{1,})-[review]+-[a-zA-Z0-9-]+$/g;
    for (const match of matches) {
      const words = request.namespace.split(match[1]);
      // split like that ["app-194-review-abc-", "-xxxxx"] 
      if (words[0].includes("-review-") && !words[1].includes("-review-")) {
        matches2 = request.namespace.matchAll(regex2);
        for (const match2 of matches2) {
          if (match2[1]) {
            useNextRegexp = true;
          }
        }
      }
    }
    
    if (useNextRegexp) {
        matches = request.namespace.matchAll(regex2);
    } else {
        matches = request.namespace.matchAll(regex);
    }
        
    for (const match of matches) {
      
      // get project
      group = fetchSync(GITLAB_HOST + "/api/v4/projects/" + match[1], {
        headers: {
          "PRIVATE-TOKEN": GITLAB_TOKEN,
        },
      });
      if (group.ok) {
        print("gitlab group id: " + group.json().namespace.id);
        // use fetchSync to make requests to backend servers
        project = fetchSync(GITLAB_RANCHER_INTEGRATION + "/get-project-for-group", {
          headers: {
            "X-Gitlab-Token": GITLAB_HOOK_TOKEN,
            "Group-Id": group.json().namespace.id.toString()
          },
        });
        if (project.ok) {
          print("gitlab group id: " + group.json().namespace.id + " -> " + project.text());
          if (!request.object.metadata?.annotations) {
            request.object.metadata['annotations'] = {};
          }  
          request.object.metadata.annotations["field.cattle.io/projectId"] = project.text();
          mutate(request.object);
        } else {
          print(project.text)
        }
      } else {
        print(group.text)
      }
    }
